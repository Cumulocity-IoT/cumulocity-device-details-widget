{"version":3,"sources":["webpack:///C:/widget/projects/gp-device-details-widget/src/lib/gp-device-details-widget.service.ts","webpack:///C:/widget/projects/gp-device-details-widget/src/lib/gp-device-details-widget.component.ts","webpack:///C:/widget/projects/gp-device-details-widget/src/lib/gp-device-details-widget-config/gp-device-details-widget-config.component.ts","webpack:///C:/widget/projects/gp-device-details-widget/src/lib/gp-device-details-widget.module.ts"],"names":["inventory","allDevices","resp","res","data","this","http","device"],"mappings":"ooCAME,E,YAAmBA,EAAA,KAAqC,eAAgB,EACrD,Y,gBAA8B,6J,cAMvC,IAAkB,G,MACtB,EAAY,CACZ,YACA,gBAAa,EACb,e,OAEAC,IACD,sBAGG,IAAK,QAAU,Q,KACZ,UAAU,qBACT,KAAIC,IACe,MAAjB,EAAIC,IAAK,OACP,QAAW,EAAK,KAAK,QAAM,IAC3B,EAASC,KAAK,KAAM,MAAG,EAAe,KAAC,EAAU,MAC/C,OAAQ,OAAW,EAAC,SACrB,K,KAEI,cAAQ,uBACP,KAAO,IACP,OAEL,gBAIJ,S,wBAKV,oBAAM,UAAY,OAAM,GAAK,YAC7B,MAAK,QAAW,KAAU,UAAK,oBAajC,O,qBAVE,KAAS,SACNC,KAAK,wBAAmB,iB,wEAKzB,uBAEA,qEAEJ,yB,wBAEC,oBAAY,UAAO,OAAQ,GAAG,YAC9B,WAAOD,EAAK,IAAE,EAAC,gBAAW,sBAC3B,0B,uBAEC,oBAAK,UAAY,OAAU,GAAM,YAEhC,OADD,qBAAsB,6BACrB,kB,iCAEC,oBAAM,UAAY,OAAM,GAAK,YAC7B,MAAK,QAAW,KAAU,UAAK,oBAOhC,OANC,KAAI,SAAK,EAAS,KAChBC,KAAK,wBAAmB,gBACzB,4DAEA,qEAEF,0B,EA1EM,Y,uBAFc,oB,MAChB,oB,MADkB,c,gCCqBzB,E,YAAoBC,EAAA,EAAgB,OAChB,YACA,gBACD,YAAS,EACT,iBAVnB,cAAS,EACT,YAUK,kB,sEAIHD,KAAK,OACLA,KAAK,kBAAkB,KAAAE,OAAA,cAAiB,aACxCF,KAAK,SAAS,OAAQ,iBACtBA,KAAK,eAAgB,IAAG,KAAS,Y,sCAI7B,EAAK,eAAgB,GACtB,uCAEA,sCAGDA,KAAK,SACLA,KAAK,qBAAuB,a,kEAG5BA,KAAK,qBACN,yE,mBAIF,sC,EA9CQ,Y,kBACT,KAAU,EACV,wC,mvBAED,mV,EATkB,oB,MAEV,c,MAHA,Y,MAKA,G,MAAkB,oB,4BAQnB,gB,y6xCCNN,E,cAAiB,e,eAPR,Y,kBACT,KAAU,EACV,+C,8iCAED,gB,0BAEO,gB,+BCiBE,EAAE,CACJ,kCACA,aAAO,EACP,uBACA,YAAW,qEACX,YACA,gBAAM,E,KACF,C,IACI,C,QACA,CACA,gBAAc,EACd,gBACA,yBAAsB,EACrB,wB,WA7BR,WAAC,C,iBACR,KAAY,EACZ,aAAS,M,QACP,CACA,aACD,oBAED,WAAkB,GAClB,gBAAW,M,UACT,CACA,aACA,WACA,E,CAEA,QAAO,kBACP,SAkBC","file":"device-details-runtime-widget-CustomWidget.16e711a9c981f3aa26d8.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { InventoryService, IdentityService, IResultList, IManagedObject } from '@c8y/client';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Injectable()\r\nexport class GpDeviceDetailsWidgetService {\r\n  restItems: any;\r\n  constructor(public inventory: InventoryService, private http: HttpClient,\r\n              public identity: IdentityService) { }\r\n    response: any;\r\n    deviceExternalId: any;\r\n    // tslint:disable-next-line: max-line-length\r\n    restItemsUrl = 'http://democenter.gateway.webmethodscloud.com/gateway/DemoCenterAPIs/1.0/ConnectedDemosAPI/restSvc/getServiceRequestsForADevice/00001239';\r\n    getAllDevices(id: string, pageToGet: number, allDevices: { data: any[], res: any }): Promise<IResultList<IManagedObject>> {\r\n      const inventoryFilter = {\r\n        pageSize: 50,\r\n        withTotalPages: true,\r\n        currentPage: pageToGet\r\n      };\r\n      if (!allDevices) {\r\n        allDevices = { data: [], res: null };\r\n      }\r\n      return new Promise(\r\n        (resolve, reject) => {\r\n          this.inventory.childAssetsList(id, inventoryFilter)\r\n            .then((resp) => {\r\n              if (resp.res.status === 200) {\r\n                if (resp.data && resp.data.length >= 0) {\r\n                  allDevices.data.push.apply(allDevices.data, resp.data);\r\n                  if (resp.data.length < inventoryFilter.pageSize) {\r\n                    resolve(allDevices);\r\n                  } else {\r\n                    this.getAllDevices(id, resp.paging.nextPage, allDevices)\r\n                      .then((np) => {\r\n                        resolve(allDevices);\r\n                      })\r\n                      .catch((err) => reject(err));\r\n                  }\r\n                }\r\n              } else {\r\n                reject(resp);\r\n              }\r\n            });\r\n        });\r\n    }\r\n    async getDeviceData(config) {\r\n     const inventory = await this.inventory.detail(config.device.id);\r\n     this.response = inventory.data;\r\n     // tslint:disable-next-line: no-unused-expression\r\n     (this.response);\r\n     if (this.response.hasOwnProperty('c8y_IsDevice')) {\r\n        this.deviceExternalId = await this.getExternalId(config.device.id);\r\n        // tslint:disable-next-line: no-unused-expression\r\n        ('Child Device = ' + config.device.id);\r\n        // tslint:disable-next-line: no-unused-expression\r\n        ('External ID = ' + this.deviceExternalId);\r\n      } else {\r\n        alert('Please select a device for this widget to fuction correctly');\r\n      }\r\n     return this.deviceExternalId;\r\n  }\r\n  async getExternalId(id) {\r\n    const { data, res, paging } = await this.identity.list(id);\r\n    return data[0].externalId;\r\n  }\r\n  async getRestItems(url): Promise<any>  {\r\n    this.restItems = await this.http.get(url).toPromise();\r\n    return this.restItems;\r\n    }\r\n    async getExternalIdForDevice(config) {\r\n      const inventory = await this.inventory.detail(config.device.id);\r\n      this.response = inventory.data;\r\n      if (this.response.hasOwnProperty('c8y_IsDevice')) {\r\n        this.deviceExternalId = await this.getExternalId(config.device.id);\r\n      } else {\r\n        alert('Please select a device for this widget to fuction correctly');\r\n      }\r\n      return this.deviceExternalId;\r\n    }\r\n  }\r\n\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { GpDeviceDetailsWidgetService } from './gp-device-details-widget.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { DatePipe } from '@angular/common';\r\nimport { GpDeviceDetailsWidgetConfigComponent } from './gp-device-details-widget-config/gp-device-details-widget-config.component';\r\nimport { InventoryService, IdentityService } from '@c8y/client';\r\n@Component({\r\n  selector: 'lib-gp-device-details-widget',\r\n  templateUrl: './gp-device-details-wiget.html',\r\n  styleUrls: ['card-fancy-example.css']\r\n})\r\nexport class GpDeviceDetailsWidgetComponent implements OnInit {\r\n  deviceDataColumnName: [];\r\n  @Input() config;\r\n  deviceExtId: any;\r\n  URL = '';\r\n  deviceUrl = '';\r\n  deviceDetails: any;\r\n  deviceDataColumnvalues: [];\r\n  columns: [];\r\n  mainList: any;\r\n  constructor(private http: HttpClient,\r\n              private datePipe: DatePipe,\r\n              private device: GpDeviceDetailsWidgetService,\r\n              public inventory: InventoryService,\r\n              public identity: IdentityService,\r\n  ) { }\r\n  async ngOnInit() {\r\n    // tslint:disable-next-line: no-unused-expression\r\n    (this.config);\r\n    this.deviceExtId = await this.device.getDeviceData(this.config);\r\n    this.URL = this.config.deviceDetailsUrl;\r\n    this.deviceUrl = this.URL + this.deviceExtId;\r\n    this.getDeviceDetails().subscribe((devData) => {\r\n      // tslint:disable-next-line: no-unused-expression\r\n      (devData);\r\n      if (devData[this.mainList][0]) {\r\n        this.deviceDetails = devData[this.mainList][0];\r\n      } else {\r\n        this.deviceDetails = devData[this.mainList];\r\n      }\r\n    });\r\n    if (this.config) {\r\n      this.mainList = this.config.mainListName;\r\n      this.deviceDataColumnName = this.config.tableColumnNames.split(',');\r\n      // tslint:disable-next-line: no-unused-expression\r\n      (this.deviceDataColumnName);\r\n      this.deviceDataColumnvalues = this.config.tableColumnValues.split(',');\r\n    }\r\n  }\r\n  getDeviceDetails(): Observable<any> {\r\n    return this.http.get(this.deviceUrl);\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n@Component({\r\n  selector: 'lib-gp-device-details-widget-config',\r\n  templateUrl: './gp-device-details-widget-config.component.html',\r\n  styleUrls: ['./gp-device-details-widget-config.component.css']\r\n})\r\nexport class GpDeviceDetailsWidgetConfigComponent implements OnInit {\r\n  @Input() config: any = {};\r\n  constructor() { }\r\n  ngOnInit() {\r\n  }\r\n }\r\n","import { NgModule } from '@angular/core';\r\nimport { HOOK_COMPONENTS, CoreModule } from '@c8y/ngx-components';\r\nimport * as preview from './preview-image'\r\nimport { GpDeviceDetailsWidgetComponent } from './gp-device-details-widget.component';\r\nimport { HttpClientModule, HttpClient, } from '@angular/common/http';\r\nimport { GpDeviceDetailsWidgetService } from './gp-device-details-widget.service';\r\nimport {DatePipe} from '@angular/common';\r\nimport { GpDeviceDetailsWidgetConfigComponent } from './gp-device-details-widget-config/gp-device-details-widget-config.component';\r\n@NgModule({\r\n  declarations: [GpDeviceDetailsWidgetComponent, GpDeviceDetailsWidgetConfigComponent],\r\n  imports: [\r\n    CoreModule,\r\n    HttpClientModule\r\n  ],\r\n  exports: [GpDeviceDetailsWidgetComponent, GpDeviceDetailsWidgetConfigComponent],\r\n  entryComponents: [GpDeviceDetailsWidgetComponent, GpDeviceDetailsWidgetConfigComponent],\r\n  providers: [\r\n    HttpClient,\r\n    DatePipe,\r\n    GpDeviceDetailsWidgetService,\r\n    {\r\n    provide: HOOK_COMPONENTS,\r\n    multi: true,\r\n    useValue: {\r\n        id: 'device.details.mat.dashboard',\r\n        previewImage: preview.previewImage,\r\n        label: 'Device Details',\r\n        description: 'Device details Dashboard - Display device details in the dashboard',\r\n        component: GpDeviceDetailsWidgetComponent,\r\n        configComponent: GpDeviceDetailsWidgetConfigComponent,\r\n        data: {\r\n            ng1: {\r\n                options: {\r\n                noDeviceTarget: false,\r\n                noNewWidgets: false,\r\n                deviceTargetNotRequired: false,\r\n                groupsSelectable: true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    }],\r\n})\r\nexport class GpDeviceDetailsWidgetModule { }\r\n"],"sourceRoot":""}